#!/bin/bash

# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2019-present Team LibreELEC (https://libreelec.tv)

. config/options $1

echo "image: creating u-boot.bin"
DESTDIR="$LE_TMP/fip"
mkdir -p $DESTDIR

case ${UBOOT_SYSTEM} in
  box|wetek)
    # No-op, use vendor booloader
    ;;

  odroid-c2)
    FIPDIR="$(get_build_dir amlogic-boot-fip)/fip"
    FUSEDIR="$(get_build_dir amlogic-boot-fip)/sd_fuse"

    $FIPDIR/fip_create --bl30  $FIPDIR/gxb/bl30.bin \
                       --bl301 $FIPDIR/gxb/bl301.bin \
                       --bl31 $FIPDIR/gxb/bl31.bin \
                       --bl33 $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/fip.bin

    $FIPDIR/fip_create --dump $DESTDIR/fip.bin

    cat $FIPDIR/gxb/bl2.package $DESTDIR/fip.bin > $DESTDIR/boot_new.bin

    $FIPDIR/gxb/aml_encrypt_gxb --bootsig --input $DESTDIR/boot_new.bin --output $DESTDIR/u-boot.img

    dd if="$DESTDIR/u-boot.img" of="$DESTDIR/u-boot.gxbb" bs=512 skip=96
    dd if="$FUSEDIR/bl1.bin.hardkernel" of="$DESTDIR/u-boot.bin.sd.bin" conv=fsync,notrunc bs=1 count=442 >"$SAVE_ERROR" 2>&1 || show_error
    dd if="$FUSEDIR/bl1.bin.hardkernel" of="$DESTDIR/u-boot.bin.sd.bin" conv=fsync,notrunc bs=512 skip=1 seek=1 >"$SAVE_ERROR" 2>&1 || show_error
    dd if="$DESTDIR/u-boot.gxbb" of="$DESTDIR/u-boot.bin.sd.bin" conv=fsync,notrunc bs=512 seek=97 >"$SAVE_ERROR" 2>&1 || show_error
    ;;

  odroid-n2)
    BIN_DIR="$(get_build_dir u-boot)/sd_fuse"
    cp $BIN_DIR/u-boot.bin.sd.bin $DESTDIR/u-boot.bin.sd.bin
    ;;

  nanopi-k2)
    FIPDIR="$(get_build_dir amlogic-boot-fip)"

    cp $FIPDIR/gxb/bl2.bin $DESTDIR/
    cp $FIPDIR/gxb/acs.bin $DESTDIR/
    cp $FIPDIR/gxb/bl21.bin $DESTDIR/
    cp $FIPDIR/gxb/bl30.bin $DESTDIR/
    cp $FIPDIR/gxb/bl301.bin $DESTDIR/
    cp $FIPDIR/gxb/bl31.img $DESTDIR/
    cp $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/bl33.bin

    $FIPDIR/blx_fix.sh $DESTDIR/bl30.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl30_zero.bin \
                       $DESTDIR/bl301.bin \
                       $DESTDIR/bl301_zero.bin \
                       $DESTDIR/bl30_new.bin bl30 2>&1 || show_error

    $FIPDIR/fip_create --bl30 $DESTDIR/bl30_new.bin \
                       --bl31 $DESTDIR/bl31.img \
                       --bl33 $DESTDIR/bl33.bin \
                              $DESTDIR/fip.bin

    $FIPDIR/fip_create --dump $DESTDIR/fip.bin

    python $FIPDIR/acs_tool.pyc $DESTDIR/bl2.bin \
                                $DESTDIR/bl2_acs.bin \
                                $DESTDIR/acs.bin 0

    $FIPDIR/blx_fix.sh $DESTDIR/bl2_acs.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl2_zero.bin \
                       $DESTDIR/bl21.bin \
                       $DESTDIR/bl21_zero.bin \
                       $DESTDIR/bl2_new.bin bl2 2>&1 || show_error

    cat $DESTDIR/bl2_new.bin $DESTDIR/fip.bin > $DESTDIR/boot_new.bin

    $FIPDIR/gxb/aml_encrypt_gxb --bootsig --input $DESTDIR/boot_new.bin --output $DESTDIR/u-boot.bin
    ;;

  *)
    FIPDIR="$(get_build_dir amlogic-boot-fip)"

    cp $FIPDIR/gxl/bl2.bin $DESTDIR/
    cp $FIPDIR/gxl/acs.bin $DESTDIR/
    cp $FIPDIR/gxl/bl21.bin $DESTDIR/
    cp $FIPDIR/gxl/bl30.bin $DESTDIR/
    cp $FIPDIR/gxl/bl301.bin $DESTDIR/
    cp $FIPDIR/gxl/bl31.img $DESTDIR/
    cp $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/bl33.bin

    $FIPDIR/blx_fix.sh $DESTDIR/bl30.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl30_zero.bin \
                       $DESTDIR/bl301.bin \
                       $DESTDIR/bl301_zero.bin \
                       $DESTDIR/bl30_new.bin bl30 2>&1 || show_error

    python $FIPDIR/acs_tool.pyc $DESTDIR/bl2.bin $DESTDIR/bl2_acs.bin $DESTDIR/acs.bin 0

    $FIPDIR/blx_fix.sh $DESTDIR/bl2_acs.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl2_zero.bin \
                       $DESTDIR/bl21.bin \
                       $DESTDIR/bl21_zero.bin \
                       $DESTDIR/bl2_new.bin bl2 2>&1 || show_error

    $FIPDIR/gxl/aml_encrypt_gxl --bl3enc --input $DESTDIR/bl30_new.bin
    $FIPDIR/gxl/aml_encrypt_gxl --bl3enc --input $DESTDIR/bl31.img
    $FIPDIR/gxl/aml_encrypt_gxl --bl3enc --input $DESTDIR/bl33.bin
    $FIPDIR/gxl/aml_encrypt_gxl --bl2sig --input $DESTDIR/bl2_new.bin --output $DESTDIR/bl2.n.bin.sig
    $FIPDIR/gxl/aml_encrypt_gxl --bootmk --output $DESTDIR/u-boot.bin --bl2 $DESTDIR/bl2.n.bin.sig --bl30 $DESTDIR/bl30_new.bin.enc --bl31 $DESTDIR/bl31.img.enc --bl33 $DESTDIR/bl33.bin.enc
    ;;
esac

case ${UBOOT_SYSTEM} in
  box|wetek)
    DTB="@@DTB_NAME@@"
    ;;

  *)
    echo "image: writing u-boot to $(basename $DISK)"
    dd if="$DESTDIR/u-boot.bin.sd.bin" of="$DISK" conv=fsync,notrunc bs=1 count=112 >"$SAVE_ERROR" 2>&1 || show_error
    dd if="$DESTDIR/u-boot.bin.sd.bin" of="$DISK" conv=fsync,notrunc bs=512 skip=1 seek=1 >"$SAVE_ERROR" 2>&1 || show_error

    DTB="$(${SCRIPTS}/uboot_helper ${PROJECT} ${DEVICE} ${UBOOT_SYSTEM} dtb)"
    ;;
esac

if [ -f "$RELEASE_DIR/3rdparty/bootloader/boot.ini" ]; then
  echo "image: copying boot.ini"
  mcopy "$RELEASE_DIR/3rdparty/bootloader/boot.ini" :: 2>&1 > /dev/null || true
fi

echo "image: creating uEnv.ini"
cat << EOF > "${LE_TMP}/uEnv.ini"
dtb_name=/dtb/${DTB}
bootargs=boot=UUID=${UUID_SYSTEM} disk=UUID=${UUID_STORAGE} quiet ${EXTRA_CMDLINE}
EOF
mcopy -s "${LE_TMP}/uEnv.ini" :: 2>&1 > /dev/null || true

echo "image: copying autoscript files and device trees"
mcopy "$RELEASE_DIR/3rdparty/bootloader/aml_autoscript" :: 2>&1 > /dev/null || true
mcopy "$RELEASE_DIR/3rdparty/bootloader/aml_autoscript.zip" :: 2>&1 > /dev/null || true
mcopy "$RELEASE_DIR/3rdparty/bootloader/emmc_autoscript" :: 2>&1 > /dev/null || true
mcopy "$RELEASE_DIR/3rdparty/bootloader/s905_autoscript" :: 2>&1 > /dev/null || true
mcopy "$RELEASE_DIR/3rdparty/bootloader/dtb" :: 2>&1 > /dev/null || true
